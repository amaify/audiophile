{
  "version": 3,
  "sources": ["../keystone.ts", "../schemas/Posts.ts", "../schemas/User.ts", "../schemas/Product.ts", "../schemas/index.ts", "../auth.ts"],
  "sourcesContent": ["/*\nWelcome to Keystone! This file is what keystone uses to start the app.\n\nIt looks at the default export, and expects a Keystone config object.\n\nYou can find all the config options in our docs here: https://keystonejs.com/docs/apis/config\n*/\n\nimport { config } from \"@keystone-6/core\";\n\n// Look in the schema file for how we define our lists, and how users interact with them through graphql or the Admin UI\nimport { lists } from \"./schemas/index\";\nimport dotenv from \"dotenv\";\n\n// Keystone auth is configured separately - check out the basic auth setup we are importing from our auth file.\nimport { withAuth, session } from \"./auth\";\n\ndotenv.config();\n\nconst {\n  S3_BUCKET_NAME: bucketName,\n  S3_REGION: region,\n  S3_ACCESS_KEY_ID: accessKeyId,\n  S3_SECRET_ACCESS_KEY: secretAccessKey,\n  ASSET_BASE_URL: baseURL,\n} = process.env;\n\nexport default withAuth(\n  // Using the config function helps typescript guide you to the available options.\n  config({\n    // the db sets the database provider - we're using sqlite for the fastest startup experience\n    db: {\n      provider: \"postgresql\",\n      url: \"postgres://postgres:2251@localhost:5432/keystone\",\n    },\n    // This config allows us to set up features of the Admin UI https://keystonejs.com/docs/apis/config#ui\n    ui: {\n      // For our starter, we check that someone has session data before letting them see the Admin UI.\n      isAccessAllowed: (context) => !!context.session?.data,\n      publicPages: [\"/signin\"],\n      getAdditionalFiles: [\n        async () => [\n          {\n            mode: \"write\",\n            src: `\n            import SigninPage from '../../../admin/pages/signin';  \n\n            export default SigninPage \n            `,\n            outputPath: \"pages/signin.js\",\n          },\n        ],\n      ],\n    },\n    server: {\n      cors: {\n        origin: \"*\",\n        methods: \"*\",\n        credentials: true,\n        allowedHeaders: \"*\",\n        exposedHeaders: \"*\",\n      },\n      healthCheck: true,\n      port: 8000,\n    },\n    lists,\n    session,\n    storage: {\n      product_images: {\n        kind: \"s3\",\n        type: \"image\",\n        bucketName: bucketName ?? \"\",\n        region: region ?? \"\",\n        accessKeyId: accessKeyId ?? \"\",\n        secretAccessKey: secretAccessKey ?? \"\",\n      },\n    },\n  })\n);\n", "import { list, ListConfig } from \"@keystone-6/core\";\nimport { text, relationship, timestamp, select } from \"@keystone-6/core/fields\";\nimport { document } from \"@keystone-6/fields-document\";\nimport { Lists } from \".keystone/types\";\nimport { allowAll } from \"@keystone-6/core/access\";\n\nexport const Post: ListConfig<Lists.Post.TypeInfo, any> = list({\n  access: allowAll,\n  fields: {\n    title: text(),\n    status: select({\n      options: [\n        { label: \"Published\", value: \"published\" },\n        { label: \"Draft\", value: \"draft\" }\n      ],\n      defaultValue: \"draft\",\n      ui: {\n        displayMode: \"segmented-control\"\n      }\n    }),\n    content: document({\n      formatting: true,\n      layouts: [\n        [1, 1],\n        [1, 1, 1],\n        [2, 1],\n        [1, 2],\n        [1, 2, 1]\n      ],\n      links: true,\n      dividers: true\n    }),\n    publishDate: timestamp(),\n    author: relationship({\n      ref: \"User.posts\",\n      ui: {\n        displayMode: \"cards\",\n        cardFields: [\"name\", \"email\"],\n        inlineEdit: { fields: [\"name\", \"email\"] },\n        linkToItem: true,\n        inlineConnect: true\n      }\n    })\n  }\n});\n", "import { list, ListConfig } from \"@keystone-6/core\";\nimport { text, relationship, password, timestamp } from \"@keystone-6/core/fields\";\nimport { Lists } from \".keystone/types\";\nimport { allowAll } from \"@keystone-6/core/access\";\n\nexport const User: ListConfig<Lists.User.TypeInfo, any> = list({\n  access: allowAll,\n  fields: {\n    name: text({ validation: { isRequired: true } }),\n    email: text({\n      validation: { isRequired: true },\n      isIndexed: \"unique\",\n      isFilterable: true\n    }),\n    // The password field takes care of hiding details and hashing values\n    password: password({ validation: { isRequired: true } }),\n    posts: relationship({ ref: \"Post.author\", many: true }),\n    createdAt: timestamp({\n      defaultValue: { kind: \"now\" }\n    })\n  },\n  ui: {\n    listView: {\n      initialColumns: [\"name\", \"posts\"]\n    }\n  }\n});\n", "import { list, ListConfig } from \"@keystone-6/core\";\nimport { text, checkbox, float, select, json } from \"@keystone-6/core/fields\";\nimport { document } from \"@keystone-6/fields-document\";\nimport { allowAll } from \"@keystone-6/core/access\";\nimport { cloudinaryImage } from \"@keystone-6/cloudinary\";\nimport dotenv from \"dotenv\";\nimport type { Lists } from \".keystone/types\";\n\ndotenv.config();\n\nexport const Product: ListConfig<Lists.Product.TypeInfo, any> = list({\n  access: allowAll,\n  fields: {\n    title: text({ validation: { isRequired: true } }),\n    newProduct: checkbox(),\n    cartTitle: text({\n      validation: { isRequired: true },\n      ui: { description: \"Enter a short title of not more than 10 characters\" },\n    }),\n    suggestionTitle: text({\n      validation: { isRequired: true },\n      ui: { description: \"Enter a short suggestion title\" },\n    }),\n    slug: text({\n      validation: { isRequired: true },\n    }),\n    previewImage: cloudinaryImage({\n      cloudinary: {\n        apiKey: process.env.CLOUDINARY_API_KEY ?? \"\",\n        apiSecret: process.env.CLOUDINARY_API_SECRET ?? \"\",\n        cloudName: process.env.CLOUDINARY_CLOUD_NAME ?? \"\",\n        folder: process.env.CLOUDINARY_API_FOLDER,\n      },\n    }),\n    cartImage: cloudinaryImage({\n      cloudinary: {\n        apiKey: process.env.CLOUDINARY_API_KEY ?? \"\",\n        apiSecret: process.env.CLOUDINARY_API_SECRET ?? \"\",\n        cloudName: process.env.CLOUDINARY_CLOUD_NAME ?? \"\",\n        folder: process.env.CLOUDINARY_API_FOLDER,\n      },\n    }),\n    category: select({\n      options: [\n        { label: \"Headphones\", value: \"headphones\" },\n        { label: \"Speakers\", value: \"speakers\" },\n        { label: \"Earphones\", value: \"earphones\" },\n      ],\n      validation: { isRequired: true },\n    }),\n    description: text({\n      validation: { isRequired: true },\n      ui: { displayMode: \"textarea\" },\n    }),\n    price: float({ defaultValue: 0.0, validation: { isRequired: true } }),\n    features: document({\n      formatting: true,\n      layouts: [\n        [1, 1],\n        [1, 1, 1],\n        [2, 1],\n        [1, 2],\n        [1, 2, 1],\n      ],\n      links: true,\n      dividers: true,\n    }),\n    boxContent: json(),\n    galleryOne: cloudinaryImage({\n      cloudinary: {\n        apiKey: process.env.CLOUDINARY_API_KEY ?? \"\",\n        apiSecret: process.env.CLOUDINARY_API_SECRET ?? \"\",\n        cloudName: process.env.CLOUDINARY_CLOUD_NAME ?? \"\",\n        folder: process.env.CLOUDINARY_API_FOLDER,\n      },\n    }),\n    galleryTwo: cloudinaryImage({\n      cloudinary: {\n        apiKey: process.env.CLOUDINARY_API_KEY ?? \"\",\n        apiSecret: process.env.CLOUDINARY_API_SECRET ?? \"\",\n        cloudName: process.env.CLOUDINARY_CLOUD_NAME ?? \"\",\n        folder: process.env.CLOUDINARY_API_FOLDER,\n      },\n    }),\n    galleryThree: cloudinaryImage({\n      cloudinary: {\n        apiKey: process.env.CLOUDINARY_API_KEY ?? \"\",\n        apiSecret: process.env.CLOUDINARY_API_SECRET ?? \"\",\n        cloudName: process.env.CLOUDINARY_CLOUD_NAME ?? \"\",\n        folder: process.env.CLOUDINARY_API_FOLDER,\n      },\n    }),\n  },\n  ui: {\n    listView: {\n      initialColumns: [\"title\", \"previewImage\", \"price\"],\n    },\n  },\n});\n", "import { Lists } from \".keystone/types\";\nimport { Post } from \"./Posts\";\nimport { User } from \"./User\";\nimport { Product } from \"./Product\";\n\nexport const lists: Lists = {\n\tPost,\n\tUser,\n\tProduct,\n};\n", "// Welcome to some authentication for Keystone\n//\n// This is using @keystone-6/auth to add the following\n// - A sign-in page for your Admin UI\n// - A cookie-based stateless session strategy\n//    - Using a User email as the identifier\n//    - 30 day cookie expiration\n//\n// This file does not configure what Users can do, and the default for this starter\n// project is to allow anyone - logged-in or not - to do anything.\n//\n// If you want to prevent random people on the internet from accessing your data,\n// you can find out how by reading https://keystonejs.com/docs/guides/auth-and-access-control\n//\n// If you want to learn more about how our out-of-the-box authentication works, please\n// read https://keystonejs.com/docs/apis/auth#authentication-api\n\nimport { randomBytes } from \"crypto\";\nimport { createAuth } from \"@keystone-6/auth\";\n\n// see https://keystonejs.com/docs/apis/session for the session docs\nimport { statelessSessions } from \"@keystone-6/core/session\";\n\n// for a stateless session, a SESSION_SECRET should always be provided\n//   especially in production (statelessSessions will throw if SESSION_SECRET is undefined)\nlet sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret && process.env.NODE_ENV !== \"production\") {\n  sessionSecret = randomBytes(32).toString(\"hex\");\n}\n\n// withAuth is a function we can use to wrap our base configuration\nconst { withAuth } = createAuth({\n  listKey: \"User\",\n  identityField: \"email\",\n\n  // this is a GraphQL query fragment for fetching what data will be attached to a context.session\n  //   this can be helpful for when you are writing your access control functions\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  sessionData: \"name createdAt\",\n  secretField: \"password\",\n  // WARNING: remove initFirstItem functionality in production\n  //   see https://keystonejs.com/docs/config/auth#init-first-item for more\n  initFirstItem: {\n    // if there are no items in the database, by configuring this field\n    //   you are asking the Keystone AdminUI to create a new user\n    //   providing inputs for these fields\n    fields: [\"name\", \"email\", \"password\"],\n\n    // it uses context.sudo() to do this, which bypasses any access control you might have\n    //   you shouldn't use this in production\n  },\n});\n\n// statelessSessions uses cookies for session tracking\n//   these cookies have an expiry, in seconds\n//   we use an expiry of 30 days for this starter\nconst sessionMaxAge = 60 * 60 * 24 * 30;\n\n// you can find out more at https://keystonejs.com/docs/apis/session#session-api\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret!,\n});\n\nexport { withAuth, session };\n"],
  "mappings": "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",
  "names": ["import_core", "import_core", "import_fields", "import_access", "import_core", "import_fields", "import_fields_document", "import_access", "dotenv", "import_dotenv", "dotenv"]
}
