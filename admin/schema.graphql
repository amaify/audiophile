# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

type Product {
  id: ID!
  title: String
  newProduct: Boolean
  cartTitle: String
  suggestionTitle: String
  slug: String
  previewImage: CloudinaryImage_File
  cartImage: CloudinaryImage_File
  category: String
  description: String
  price: Float
  features: Product_features_Document
  boxContent: JSON
  galleryOne: CloudinaryImage_File
  galleryTwo: CloudinaryImage_File
  galleryThree: CloudinaryImage_File
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """ Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

type Product_features_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ProductWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  title: StringFilter
  newProduct: BooleanFilter
  cartTitle: StringFilter
  suggestionTitle: StringFilter
  slug: StringFilter
  category: StringFilter
  description: StringFilter
  price: FloatFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input ProductOrderByInput {
  id: OrderDirection
  title: OrderDirection
  newProduct: OrderDirection
  cartTitle: OrderDirection
  suggestionTitle: OrderDirection
  slug: OrderDirection
  category: OrderDirection
  description: OrderDirection
  price: OrderDirection
}

input ProductUpdateInput {
  title: String
  newProduct: Boolean
  cartTitle: String
  suggestionTitle: String
  slug: String
  previewImage: Upload
  cartImage: Upload
  category: String
  description: String
  price: Float
  features: JSON
  boxContent: JSON
  galleryOne: Upload
  galleryTwo: Upload
  galleryThree: Upload
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  title: String
  newProduct: Boolean
  cartTitle: String
  suggestionTitle: String
  slug: String
  previewImage: Upload
  cartImage: Upload
  category: String
  description: String
  price: Float
  features: JSON
  boxContent: JSON
  galleryOne: Upload
  galleryTwo: Upload
  galleryThree: Upload
}

type HomePageHero {
  id: ID!
  heroTitle: String
  heroCategory: String
  heroDescription: String
  heroModbileImage: CloudinaryImage_File
  heroTabletImage: CloudinaryImage_File
  heroDesktopImage: CloudinaryImage_File
}

input HomePageHeroWhereUniqueInput {
  id: ID
}

input HomePageHeroWhereInput {
  AND: [HomePageHeroWhereInput!]
  OR: [HomePageHeroWhereInput!]
  NOT: [HomePageHeroWhereInput!]
  id: IDFilter
  heroTitle: StringFilter
  heroCategory: StringFilter
  heroDescription: StringFilter
}

input HomePageHeroOrderByInput {
  id: OrderDirection
  heroTitle: OrderDirection
  heroCategory: OrderDirection
  heroDescription: OrderDirection
}

input HomePageHeroUpdateInput {
  heroTitle: String
  heroCategory: String
  heroDescription: String
  heroModbileImage: Upload
  heroTabletImage: Upload
  heroDesktopImage: Upload
}

input HomePageHeroUpdateArgs {
  where: HomePageHeroWhereUniqueInput!
  data: HomePageHeroUpdateInput!
}

input HomePageHeroCreateInput {
  heroTitle: String
  heroCategory: String
  heroDescription: String
  heroModbileImage: Upload
  heroTabletImage: Upload
  heroDesktopImage: Upload
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(where: ProductWhereUniqueInput!, data: ProductUpdateInput!): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createHomePageHero(data: HomePageHeroCreateInput!): HomePageHero
  createHomePageHeroes(data: [HomePageHeroCreateInput!]!): [HomePageHero]
  updateHomePageHero(where: HomePageHeroWhereUniqueInput!, data: HomePageHeroUpdateInput!): HomePageHero
  updateHomePageHeroes(data: [HomePageHeroUpdateArgs!]!): [HomePageHero]
  deleteHomePageHero(where: HomePageHeroWhereUniqueInput!): HomePageHero
  deleteHomePageHeroes(where: [HomePageHeroWhereUniqueInput!]!): [HomePageHero]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  homePageHeroes(where: HomePageHeroWhereInput! = {}, orderBy: [HomePageHeroOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HomePageHeroWhereUniqueInput): [HomePageHero!]
  homePageHero(where: HomePageHeroWhereUniqueInput!): HomePageHero
  homePageHeroesCount(where: HomePageHeroWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
